import React from 'react';
import { HuffmanTree } from "../huffman";
import ReactDOM from 'react-dom';
import { Zlib } from './zlib'

// const stream = '789c5553490edb300cfc0a1f60f80f45d15b37a0e80318897158687128d1e8f33b929da63d3956c4e16cfe5c4d32e9de3c53aca91a35edc459fa42a19626a14b77238eba6b0b5a3692a47da51f12a9d5c8491a250ede4836e9943080df5aba58f4bc9077bae94d0a5e084000214fdd34485be9fb839ba48481430f31632ada940e49147d3c1f1a3c3105b7e6b8ff21e9d33963714a1ab47bd442a51692a2999e0ef02679175be9ab270c9e6fd4b5048d5e3a550b0a76c427d24a5fd80d63356aa534cc58e801b626061f40be9ffc78a1bb5896d2a1638760317ea97df3c2d1ffe752840b45dda0ab81e25c03d4ac00ce3b80ab153659e95357004c0fc1673872895fc8bc1bb64e7658b1501ef21bfdf2d6eb4a1f8d1bedd57ad78efc2edcccadf120f4c259e967278dffdc6484b4101622e8a89736b6e06f41af58c6559286ddd3e4834d47e2bf49eef719848d185eae8f440e482fdc713949bdfec8f0d0379d12263dd0e1103c379804129b83cf5592e9d4e169f7ced8dd785729b34e6f01e7212cafede495d034ab7f7d177fc577373457d370f3ecd26c31f62fb0f506400c17bd3ddeca678e474dde7746ddbf8dde5cb221ab3e5d689f026f030c89f2c81851230b368800339c5618d7168cb430bf23d338d21801a1207f005f1a49c2';
//const stream = '789ccb48cdc9c95728cf2fca4901001a0b045d'
const stream = '';

const Index = () => {
  const zlib = new Zlib(stream).get()
  const blocks = zlib.deflate.blocks.map(x => <Deflate {...x} />)
  return <html>
    <body>
      <h1>How does DEFLATE work</h1>
      <p>
        Deflate is a speficiation set out at RFC 1951. There's a lot of history here, {"that i'll leave to the experts"}. In this specific case,
        we're dealing with DEFLATE with a zlib header. This is one of the options that the zlib library can provide. It is also able to
      </p>
      <p>
        Today, i'll attempt to explain DEFLATE through through use of a few examples. Feel free to change the {"Following switcher"} and
        this page will re-generate to create an explaination for that specific stream.
      </p>
      <p>
        Right now, we're dealing with the following stream
      </p>
      <code>
        {zlib.stream}
      </code>
      <p>
        We'll start by digging in what's right at the start. The ZLIB header.
      </p>
      <ZlibHeader {...zlib.zlibHeader} />
      {blocks}
      <pre>
        {/* {JSON.stringify(zlib, null, 2)} */}
      </pre>
    </body>
  </html>
}

const ZlibHeader = (props) => {

  return <div>
    <p>
      A header is made of a few parts as defined in RFC 1950. The header is to tell us a few things:
    </p>
    <ul>
      <li>The type of compression used</li>
      <li>If there's a pre-set dictionary to use</li>
      <li>The compression level</li>
      <li>A checksum for all of this data</li>
      <li>And a little more about the specifics of the compression</li>
    </ul>
    <p>
      That's a lot of info in a small amount. Lets break it down. The RFC says
    </p>
    <quote>
      <pre>
        {`A zlib stream has the following structure:

  0   1
+---+---+
|CMF|FLG|   (more-->)
+---+---+`}
      </pre>
    </quote>
    <p>
      This is saying that byte 0 outlines what it refers to as <code>CMF</code> while byte 1 outlines <code>FLG</code>.
    </p>
    <h4>CMF</h4>
    <p>
      This byte breaks down in the following way
    </p>
    <quote>
      <pre>
        {`bits 0 to 3  CM     Compression method
bits 4 to 7  CINFO  Compression info`}
      </pre>
    </quote>
    <p>
      Here it's important to understand just how bits are extracted from bytes. Bit 0 can mean either end of a byte depending on the
      semantics of the byte. Therefore as we're now referring to indexes of bytes, we have to define how to extract bits from a byte.
    </p>
    <p>
      The RFC defines the bit order specifically as follows
    </p>
    <quote>
      <pre>
        {`However, a byte considered as
an integer between 0 and 255 does have a most- and least-
significant bit, and since we write numbers with the most-
significant digit on the left, we also write bytes with the most-
significant bit on the left.  In the diagrams below, we number the
bits of a byte so that bit 0 is the least-significant bit, i.e.,
the bits are numbered:

+--------+
|76543210|
+--------+`}
      </pre>
    </quote>
    <p>
      So for a byte referencing the value 200, we would write it as <code>11001000</code>. Bit 0 would be <code>0</code>, bit 7 would be <code>1</code>.
      Keep your wits about you though, this will change.
    </p>
    <p>
      Getting back to CMF, lets look at the flag as a whole {props.compressionInfo.raw + props.compressionMethod.raw}.we find that bits 0 to 3 (the compression method) are {props.compressionMethod.raw}. Which is {props.compressionMethod.val}.
      Bits 4 to 7 (the compression info) are {props.compressionInfo.raw}, which of course is {props.compressionInfo.val}.
    </p>
    <p>
      The second byte is the FLG (Flags). This is outlined as
    </p>
    <ul>
      <li>bits 0 to 4  FCHECK  (check bits for CMF and FLG)</li>
      <li>bit  5       FDICT   (preset dictionary)</li>
      <li>bits 6 to 7  FLEVEL  (compression level)</li>
    </ul>
    <p>
      In our case our values are:
    </p>
    <code>FLEVEL: {props.flags.fLevel.val}</code>
    <p>
      The compression level is outlined as
    </p>
    <quote>
      <pre>
        {`            0 - compressor used fastest algorithm
            1 - compressor used fast algorithm
            2 - compressor used default algorithm
            3 - compressor used maximum compression, slowest algorithm`}
      </pre>
    </quote>
    <code>FDICT: {props.flags.fDict.val}</code>
    <quote>
      <pre>{`If FDICT is set, a DICT dictionary identifier is present
immediately after the FLG byte`}</pre>
    </quote>
    <p>
      At this point, this deflate blog only supports those streams without a preset dict. This is most streams.
    </p>
    <code>FCHECK: {props.flags.fCheck.val}</code>
    <p>
      As this sounds, this is a checksum. We combine it as per the RFC
    </p>
    <quote>
      <pre>{`
       The FCHECK value must be such that CMF and FLG, when viewed as
       a 16-bit unsigned integer stored in MSB order (CMF*256 + FLG),
       is a multiple of 31.`}</pre>
    </quote>
    <p>
      So lets have a look at CMF and FLG together <code>{props.checkHeader.raw}</code>. This corresponds with {props.checkHeader.val}.
      If we divide that by 31, we should get a whole integer. If not, then this is an invalid header.
    </p>
    <p>
      In this case it {props.checkHeader.val % 31 == 0 ? "IS" : "isn't"} a valid header.
    </p>
    {props.compressionMethod.val !== 8 && props.compressionInfo.val !== 7 ? <div>Unfortunately this stream is not supported. Only those with a compression method of 8
      and a compressionInfo of 7 are supported</div> : <ValidHeader {...props} />}
  </div>
}

const ValidHeader = (props) => {
  return <div>
    <p>
      Next in the ZLIB header RFC it specifies that compressed data comes along. In our case, we're dealing with a DEFLATE stream. To do so, we must now
      switch to RFC 1951. This RFC specifies the DEFLATE stream itself.
    </p>
    <p>
      I hope you enjoyed the header we just had. DEFLATE starts with a header of its own. This one is remarkably simple though.
    </p>
    <quote>
      <pre>{`
               Each block of compressed data begins with 3 header bits
               containing the following data:
      
                  first bit       BFINAL
                  next 2 bits     BTYPE`}</pre>
    </quote>
    <p>
      Before we get into this, we have to address the bit packing again. We're in a different RFC, so checking section 3.1.1 we can see that there's a specific
      guidance of how this is packed. This is very important to get right, as unlike the previous ZLIB header we aren't talking about data in bytes at a time,
      and the bits within those bytes. Instead we may be looking at multiple bits over byte boundaries.
    </p>
    <p>
      Here's the relevant part from the RFC, i'd encourage reading it and then we can unpack it.
    </p>
    <quote>
      <pre>{`we describe the compressed block format
         in below, as a sequence of data elements of various bit
         lengths, not a sequence of bytes.  We must therefore specify
         how to pack these data elements into bytes to form the final
         compressed byte sequence:

             * Data elements are packed into bytes in order of
               increasing bit number within the byte, i.e., starting
               with the least-significant bit of the byte.
             * Data elements other than Huffman codes are packed
               starting with the least-significant bit of the data
               element.
             * Huffman codes are packed starting with the most-
               significant bit of the code.
               
         In other words, if one were to print out the compressed data as
         a sequence of bytes, starting with the first byte at the
         *right* margin and proceeding to the *left*, with the most-
         significant bit of each byte on the left as usual, one would be
         able to parse the result from right to left, with fixed-width
         elements in the correct MSB-to-LSB order and Huffman codes in
         bit-reversed order (i.e., with the first bit of the code in the
         relative LSB position).`}</pre>
    </quote>
    <p>
      So, a <definition>data element</definition> is a token in terms of a part of the deflate stream. They're packed into bytes
      from right side to left side. Data elements that aren't the actual huffman codes themselves are turned into
    </p>
    <p>
      TODO: Insert some examples of how we'd pack some parts
    </p>
    <p>
      So, lets get down to business and look at our first deflate block.
    </p>
  </div>
}

const Dynamic = (props) => {
  var compressedAlph = []
  for (var i = 0; i < props.tables.litLenLengths.length; i++) {
    compressedAlph.push(i)
  }
  var lengthAlph = []
  for (var i = 0; i < props.tables.distCodes.length; i++) {
    lengthAlph.push(i)
  }
  return <>
    <p>
      So, we're in a dynamic block. Dynamic blocks basically mean that the huffman trees that are used are defined within this stream.
    </p>
    <p>
      In a Dynamic block, there's 3 huffman trees that need to be identified
    </p>
    <ul>
      <li>A huffman tree that defines how to decompress the next two huffman trees</li>
      <li>A huffman tree that defines the literal/lengths</li>
      <li>A huffman tree that defines the distances back</li>
    </ul>
    <p>
      So to get started, we do need to get some information that'll allow us to read those huffman trees. This information is split into
    </p>
    <ul>
      <li>HLIT - The number of literal length codes (257 - 286)</li>
      <li>HDIST - The number of distance codes (1 - 32)</li>
      <li>HCLEN - The number of code lengths used to define the other huffman codes (4 - 19)</li>
      <li>(HCLEN + 4 * 3) - Number of bits to read to get the first huffman tree to decode the next two</li>
    </ul>
    <p>
      When decoding the 'meta' huffman that encodes the next two trees, we go in with the knowledge that the
      codes are in the order 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15.
    </p>
    <p>
      That means that the first 3 bits encode the code length for 16, the next three encode the code 17, and so on.
    </p>
    <p>
      But What do these codes correspond to? Lets check the RFC
    </p>
    <pre>{`
               0 - 15: Represent code lengths of 0 - 15
               16: Copy the previous code length 3 - 6 times.
                   The next 2 bits indicate repeat length
                         (0 = 3, ... , 3 = 6)
                      Example:  Codes 8, 16 (+2 bits 11),
                                16 (+2 bits 10) will expand to
                                12 code lengths of 8 (1 + 6 + 5)
               17: Repeat a code length of 0 for 3 - 10 times.
                   (3 bits of length)
               18: Repeat a code length of 0 for 11 - 138 times
                   (7 bits of length)`}</pre>
    <p>
      So, this allows the next huffman tree, that may be as many as 286 codes, so be compressed quite dramatically. Especially
      in the case where a run of literals is not used, and thus 0 is provided as the code length.
    </p>
    <p>
      Without further ado, if we decode (HCLEN + 4 * 3) into code lengths, we get the following huffman tree.
    </p>
    <HuffmanTree alphabet={[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]} lens={props.tables.bitTable} />
    <p>
      We can now use this tree to read the subsequent {'TODO'} codes to get out literal length alphabet
    </p>
    <HuffmanTree alphabet={compressedAlph} lens={props.tables.litLenLengths}/>
    <p>
      And finally, our distance tree
    </p>
    <HuffmanTree alphabet={lengthAlph} lens={props.tables.distCodes} />
  </>
}

const Deflate = (props) => {
  const blockType = props.header.bType.val
  let next;
  if (blockType == 0) {
    next = <></>
  } else if (blockType == 1) {
    next = <></>
  } else if (blockType == 2) {
    next = <>
      <Dynamic {...props} />
    </>
  } else if (blockType == 3) {
    next = "Invalid block type..."
  }

  return <div>
    <p>
      A deflate block starts by telling us two things, the type, and if it's the last one. Lets start with BTYPE
      which is {props.header.bType.raw}, AKA {props.header.bType.val}. These correspond to the following values:
    </p>
    <ul>
      <li>00 - no compression</li>
      <li>01 - compression with fixed Huffman codes</li>
      <li>10 - compression with dynamic Huffman codes</li>
      <li>11 - reserved (error)</li>
    </ul>
    <p>
      We also find out one other piece of information here. If we're done or not. Lets check out BFINAL. It's
      {props.header.bFinal.val}, that means that after this {props.header.bFinal.val ? "we're done." : "there are some more blocks."}
    </p>
    {next}
  </div>
}

ReactDOM.render(<Index />, document.getElementById('root'));